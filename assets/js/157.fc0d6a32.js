(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{975:function(e,s,r){"use strict";r.r(s);var t=r(114),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"spring装载bean-初始化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring装载bean-初始化"}},[e._v("#")]),e._v(" Spring装载Bean - 初始化")]),e._v(" "),r("h2",{attrs:{id:"一、postprocessor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、postprocessor"}},[e._v("#")]),e._v(" 一、PostProcessor")]),e._v(" "),r("ol",[r("li",[e._v("本身也是一种需要注册到容器里的Bean")]),e._v(" "),r("li",[e._v("其里面的方法会在特定的时机被容器调用")]),e._v(" "),r("li",[e._v("实现不改变容器获取Bean核心逻辑的情况下对Bean进行扩展。如：对Bean进行包装，影响其行为、修改Bean的内容等")])]),e._v(" "),r("p",[e._v("大类分为容器级别的后置处理器以及Bean级别的后置处理器")]),e._v(" "),r("ol",[r("li",[e._v("BeanDefinitionRegistryPostProcessor")]),e._v(" "),r("li",[e._v("BeanFactoryPostProcessor")]),e._v(" "),r("li",[e._v("BeanPostProcessor")])]),e._v(" "),r("h3",{attrs:{id:"_1、beandefinitionregistrypostprocessor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、beandefinitionregistrypostprocessor"}},[e._v("#")]),e._v(" 1、BeanDefinitionRegistryPostProcessor")]),e._v(" "),r("ol",[r("li",[e._v("负责对BeanDefinition实例的自定义注册")])]),e._v(" "),r("h3",{attrs:{id:"_2、beanfactorypostprocessor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、beanfactorypostprocessor"}},[e._v("#")]),e._v(" 2、BeanFactoryPostProcessor")]),e._v(" "),r("ol",[r("li",[e._v("影响容器")])]),e._v(" "),r("h3",{attrs:{id:"_3、beanpostprocessor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、beanpostprocessor"}},[e._v("#")]),e._v(" 3、BeanPostProcessor")]),e._v(" "),r("ol",[r("li",[e._v("Bean的后置处理器")]),e._v(" "),r("li",[e._v("实现两个方法postProcessBeforeInitialization和postProcessAfterInitialization")])]),e._v(" "),r("h2",{attrs:{id:"二、aware-可感知"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、aware-可感知"}},[e._v("#")]),e._v(" 二、Aware（可感知）")]),e._v(" "),r("p",[e._v("从Bean里获取到容器实例并对其进行操作")]),e._v(" "),r("h2",{attrs:{id:"三、事件驱动模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、事件驱动模型"}},[e._v("#")]),e._v(" 三、事件驱动模型")]),e._v(" "),r("p",[e._v("三大组成部分\n1、 事件：ApplicationEvent抽象类\n2、 事件监听器：ApplicationListener\n3、 事件发布器：Publisher以及Multicaster")]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"四、refresh"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、refresh"}},[e._v("#")]),e._v(" 四、refresh")]),e._v(" "),r("ol",[r("li",[e._v("prepareRefresh -> 刷新前准备工作")]),e._v(" "),r("li",[e._v("obtainFreshBeanFactory -> 获取子类刷新后的内部beanFactory实例")]),e._v(" "),r("li",[e._v("prepareBeanFactory -> 为容器注册必要的系统级别Bean")]),e._v(" "),r("li",[e._v("postProcessBeanFactory -> 允许容器的子类去注册postProcessor")]),e._v(" "),r("li",[e._v("invokeBeanFactoryPostProcessors -> 调用容器注册的容器级别的后置处理器")]),e._v(" "),r("li",[e._v("registerBeanPostProcessors -> 向容器注册Bean级别的后置处理器")]),e._v(" "),r("li",[e._v("initMessageSource -> 初始化国际化配置")]),e._v(" "),r("li",[e._v("initApplicationEventMulticaster -> 初始化事件发布者组件")]),e._v(" "),r("li",[e._v("onFresh -> 在单例Bean初始化之前预留给子类初始化其他特殊bean的口子")]),e._v(" "),r("li",[e._v("registerListeners -> 向前面的事件发布者组件注册事件监听者")]),e._v(" "),r("li",[e._v("finishBeanFactoryInitialization -> 设置系统级别的服务，实例化所有非懒加载的单例")]),e._v(" "),r("li",[e._v("finishRefresh -> 触发初始化完成的回调方法，并发布容器刷新完成的事件给监听者")]),e._v(" "),r("li",[e._v("resetCommonCaches -> 重置Spring内核中的公用缓存")])]),e._v(" "),r("ad"),e._v(" "),r("comment")],1)}),[],!1,null,null,null);s.default=a.exports}}]);